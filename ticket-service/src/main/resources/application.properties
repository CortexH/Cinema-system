spring.application.name=ticket-service

spring.kafka.bootstrap-servers=localhost:9092

# KAFKA PRODUCER
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://localhost:8081

# KAFKA CONSUMER
spring.kafka.consumer.group-id=ticket-service-group
spring.kafka.consumer.client-id=ticket-service-consumer-${random.uuid}

spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.schema.registry.url=http://localhost:8081
spring.kafka.consumer.properties.specific.avro.reader=true
spring.kafka.consumer.properties.avro.use.specific.reader=true
spring.kafka.consumer.allow-auto-create-topics=false

# KAFKA TOPICS
## PUBLISHER
kafka.topic.ticket.created=ticket-created-events
kafka.topic.ticket.creation.failed=ticket-creation-failed-events
kafka.topic.ticket.request=ticket-requested-events
kafka.topic.ticket.used=ticket.used.events

## CONSUMER

kafka.topic.room.seat-reserved=seat-reserved-events
kafka.topic.room.seat-released=seat-released-events

# CONSTANTS
app.config.qrcode.base-url=http://localhost:6968/api/v1/tickets/conciliate/

spring.datasource.url=jdbc:h2:mem:ticketdb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.h2.console.enabled=true


server.address=0.0.0.0
server.port=6968
